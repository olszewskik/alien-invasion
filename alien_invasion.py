import sys
from time import sleep

import pygame

from settings import Settings
from game_stats import GameStats
from rocket import Rocket
from alien import Alien
from bullet import Bullet


class AlienInvasion:
    """General class dedicated to managing the resources and the way the game works"""

    def __init__(self):
        """Initializing the game and creating its resources"""
        pygame.init()
        self.settings = Settings()

        self.screen = pygame.display.set_mode((self.settings.screen_width, self.settings.scree_height))

        # Full screen mode --> START
        # self.screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
        # self.settings.screen_width = self.screen.get_rect().width
        # self.settings.scree_height = self.screen.get_rect().height
        # Full screen mode --> STOP

        pygame.display.set_caption("Alien Invasion")

        # Creation of a copy of the game statistics.
        self.stats = GameStats(self)

        self.rocket = Rocket(self)
        self.bullets = pygame.sprite.Group()
        self.aliens = pygame.sprite.Group()

        self._create_fleet()

    def run_game(self):
        """Starting the main game loop"""
        while True:
            self._check_events()

            if self.stats.game_active:
                self.rocket.update()
                self._update_bullets()
                self._update_aliens()

            self._update_screen()

    def _check_events(self):
        """Reaction to events generated by the keyboard and mouse"""
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                self._check_keydown_events(event)
            elif event.type == pygame.KEYUP:
                self._check_keyup_events(event)

    def _check_keydown_events(self, event):
        """Reaction to pressing a key"""
        if event.key == pygame.K_RIGHT:
            self.rocket.moving_right = True
        elif event.key == pygame.K_LEFT:
            self.rocket.moving_left = True
        elif event.key == pygame.K_q:
            sys.exit()
        elif event.key == pygame.K_SPACE:
            self._fire_bullet()

    def _check_keyup_events(self, event):
        """Reaction to the release of the key"""
        if event.key == pygame.K_RIGHT:
            self.rocket.moving_right = False
        elif event.key == pygame.K_LEFT:
            self.rocket.moving_left = False

    def _fire_bullet(self):
        """Create a new bullet and add it to a bullet group"""
        if len(self.bullets) < self.settings.bullets_allowed:
            new_bullet = Bullet(self)
            self.bullets.add(new_bullet)

    def _create_fleet(self):
        """Create a complete aliens fleet"""
        # Create an alien and determine the number of aliens that will fit in the row.
        # The distance between each alien is equal to the width of the alien.
        alien = Alien(self)
        alien_width, alien_height = alien.rect.size
        available_space_x = self.settings.screen_width - (2 * alien_width)
        number_aliens_x = available_space_x // (2 * alien_width)

        # Determine how many rows of aliens will fit on the screen
        rocket_height = self.rocket.rect.height
        available_space_y = (self.settings.scree_height - (3 * alien_height) - rocket_height)
        number_rows = available_space_y // (2 * alien_height)

        # Create a complete aliens fleet
        for row_number in range(number_rows):
            for alien_number in range(number_aliens_x):
                self._create_alien(alien_number, row_number)

    def _create_alien(self, alien_number, row_number):
        """Create an alien and place it in a row"""
        alien = Alien(self)
        alien_width, alien_height = alien.rect.size
        alien.x = alien_width + 2 * alien_width * alien_number
        alien.rect.x = alien.x
        alien.rect.y = alien.rect.height + 2 * alien.rect.height * row_number
        self.aliens.add(alien)

    def _check_fleet_edges(self):
        """The right response when an alien reaches the edge of the screen"""
        for alien in self.aliens.sprites():
            if alien.check_edges():
                self._change_fleet_direction()
                break

    def _change_fleet_direction(self):
        """Moving the entire fleet down and changing the direction in which it is moving"""
        for alien in self.aliens.sprites():
            alien.rect.y += self.settings.fleet_drop_speed
        self.settings.fleet_direction *= -1

    def _update_screen(self):
        """Updates the images on the screen and goes to a new screen"""
        self.screen.fill(self.settings.bg_color)
        self.rocket.blitme()

        for bullet in self.bullets.sprites():
            bullet.draw_bullet()
        self.aliens.draw(self.screen)

        pygame.display.flip()

    def _update_bullets(self):
        """Bullet position update and removal of invisible on-screen bullets"""
        # Bullet position update
        self.bullets.update()

        # Removal of bullets that are off-screen
        for bullet in self.bullets.copy():
            if bullet.rect.bottom <= 0:
                self.bullets.remove(bullet)

        self._check_bullet_alien_collisions()

    def _check_bullet_alien_collisions(self):
        """Collision reaction between a missile and an alien"""
        # Removal of all projectiles and aliens colliding with each other.
        collisions = pygame.sprite.groupcollide(self.bullets, self.aliens, True, True)

        if not self.aliens:
            # Removal of existing bullets and creation of a new fleet
            self.bullets.empty()
            self._create_fleet()

    def _update_aliens(self):
        """Checking if the alien fleet is at the edge, then updating the position of all aliens in the fleet"""
        self._check_fleet_edges()
        self.aliens.update()

        # Detecting collisions between an alien and a ship.
        if pygame.sprite.spritecollideany(self.rocket, self.aliens):
            self._rocket_hit()

        # Search for aliens reaching the bottom of the screen.
        self._check_aliens_bottom()

    def _rocket_hit(self):
        """Alien hitting a rocket"""
        if self.stats.rocket_left > 0:
            # Decrease the value stored in ships_left
            self.stats.rocket_left -= 1

            # Removal of aliens and bullets lists
            self.aliens.empty()
            self.bullets.empty()

            # Create a new fleet and center the rocket
            self._create_fleet()
            self.rocket.center_rocket()

            # Pause
            sleep(0.5)

        else:
            self.stats.game_active = False

    def _check_aliens_bottom(self):
        """Checks if any aliens reached the bottom of the screen"""
        screen_rect = self.screen.get_rect()
        for alien in self.aliens.sprites():
            if alien.rect.bottom >= screen_rect.bottom:
                self._rocket_hit()
                break

if __name__ == '__main__':
    # Create a copy of the game and start it
    ai = AlienInvasion()
    ai.run_game()
